{"version":3,"sources":["components/ErrorBoundary/ErrorBoundary.jsx","components/LoadingHOC/loadingHoc.module.scss","components/PaginationItem/paginationItem.module.scss","components/Info/Info.jsx","components/LoadingHOC/LoadingHOC.jsx","main/App.js","components/PaginationItem/PaginationItem.jsx","serviceWorker.js","index.js"],"names":["ErrorBoundary","state","hasError","children","this","props","error","Component","module","exports","Info","data","map","index","title","url","author","titleBlock","urlBlock","authorBlock","LoadingHOC","isLoading","getData","setState","fetchData","prevProps","prevUrl","component","rest","className","styles","hidden","a","axios","get","response","hits","App","page","prevLocation","location","currentLocation","prevPage","parse","search","currentPage","React","PaginationItem","name","item","to","Boolean","window","hostname","match","AsyncPage","asyncModule","console","log","Index","handleOnChangePage","array","Array","fill","onClick","exact","path","_","style","marginRight","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e0c66933.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  state = { hasError: false };\n\n  // componentDidCatch(error, info) {\n  //   this.setState({ hasError: true });\n  // }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  render() {\n    const { children } = this.props;\n    if (this.state.hasError) {\n      return <div>Что-то пошло не так</div>;\n    }\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hidden\":\"loadingHoc_hidden__20XAk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"paginationItem_item__3sJAH\"};","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Info extends Component {\n  render() {\n    // const {\n    //   context: { data },\n    // } = this;\n    const {\n      props: { data },\n    } = this;\n\n    return (\n      <div>\n        {data &&\n          data.map(({ title, url, author }, index) => {\n            const titleBlock = <h5>{title}</h5>;\n            const urlBlock = <div>{url} </div>;\n            const authorBlock = <div>{author}</div>;\n            return (\n              <div>\n                {titleBlock}\n                {urlBlock}\n                {authorBlock}\n              </div>\n            );\n          })}\n      </div>\n    );\n  }\n}\n\n// Info.contextType = LoadingProvider;\n\nexport default Info;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nimport styles from \"./loadingHoc.module.scss\";\n\nclass LoadingHOC extends Component {\n  state = { data: null, isLoading: true };\n\n  async fetchData() {\n    try {\n      const data = await this.props.getData(this.props.url);\n      this.setState({ data: data, isLoading: false });\n    } catch (err) {\n      this.setState({ error: err });\n    }\n  }\n\n  async componentDidMount() {\n    this.fetchData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const { url: prevUrl } = prevProps;\n    const { url: currentUrl } = this.props;\n    if (currentUrl !== prevUrl) {\n      this.fetchData();\n    }\n  }\n\n  render() {\n    const {\n      props: { component: Component, ...rest },\n      state: { data, isLoading },\n    } = this;\n\n    return (\n      <div>\n        {isLoading && <p>Загрузка...</p>}\n        <div className={isLoading ? styles.hidden : \"\"}>\n          <Component data={data} {...rest} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoadingHOC;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { parse } from \"query-string\";\n\nimport ErrorBoundary from \"../components/ErrorBoundary/ErrorBoundary\";\n// import LoadingProvider from \"./LoadingProvider\";\nimport Info from \"../components/Info/Info\";\nimport LoadingHOC from \"../components/LoadingHOC/LoadingHOC\";\n// import ComponentWithLoad from \"./ComponentWithLoad\";\n\nconst getData = async (url) => {\n  const response = await axios.get(url);\n  return response.data.hits;\n};\n\nclass App extends React.Component {\n  state = { page: 1 };\n  componentDidUpdate(prevProps) {\n    const { location: prevLocation } = prevProps;\n    const { location: currentLocation } = this.props;\n    const { page: prevPage } = parse(prevLocation.search);\n    const { page: currentPage } = parse(currentLocation.search);\n    if (prevPage !== currentPage) {\n      this.setState({ page: currentPage });\n    }\n  }\n  render() {\n    const { page } = this.state;\n    return (\n      <ErrorBoundary>\n        <LoadingHOC\n          getData={getData}\n          component={Info}\n          url={`https://hn.algolia.com/api/v1/search?query=react&page=${page}`}\n        />\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nimport styles from \"./paginationItem.module.scss\";\n\nclass PaginationItem extends Component {\n  render() {\n    const {\n      props: { name, url },\n    } = this;\n\n    return (\n      <Link className={styles.item} to={url}>\n        {name}\n      </Link>\n    );\n  }\n}\n\nexport default PaginationItem;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./main/App\";\n// import AnotherPage from \"./anotherPage/AnotherPage\";\nimport PaginationItem from \"./components/PaginationItem/PaginationItem\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst paginationLength = 4;\n\nconst AsyncPage = async () => {\n  const asyncModule = await import(\n    \"./anotherPage/AnotherPage\" /* webpackChunkName: \"AnotherPage\"*/\n  );\n  console.log(asyncModule);\n};\n\nclass Index extends React.Component {\n  state = { page: 0 };\n\n  handleOnChangePage = () => {\n    // window.location = \"http://fecore.net.ua/books/rq7s2k-react/lesson-07/\";\n    // window.history.pushState({}, \"\", this.state.page ? \"/\" : \"/pseudoPage\");\n    // window.history.replaceState();\n    this.setState({ page: this.state.page ? 0 : 1 });\n  };\n\n  render() {\n    const { page } = this.state;\n    const array = new Array(paginationLength).fill(0);\n\n    return (\n      <BrowserRouter>\n        <button onClick={AsyncPage}>Click me</button>\n        <Switch>\n          <Route exact path=\"/\">\n            {({ location }) => <App location={location} />}\n          </Route>\n          {/* <Route path=\"/another-page\">\n            {({ location }) => <AnotherPage location={location} />}\n          </Route> */}\n        </Switch>\n        {array.map((_, index) => (\n          <PaginationItem url={`/?page=${index + 1}`} name={index + 1} />\n        ))}\n        <Link style={{ marginRight: 20 }} to=\"/\">\n          to Main\n        </Link>\n        <Link to=\"/another-page\">to Another page</Link>\n      </BrowserRouter>\n    );\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}